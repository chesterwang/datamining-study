#rec.similarity.class=pcc
#rec.neighbors.knn.number=50
#rec.recommender.class=userknn
#rec.recommender.similarities=user
#rec.recommender.isranking=false
#rec.recommender.ranking.topn=10
#rec.filter.class=generic
#rec.similarity.shrinkage=10

# set data directory
dfs.data.dir=/home/chester/gitlab.chesterwang.org/spark-ml-example/data
# set result directory
# recommender result will output in this folder
dfs.result.dir=/tmp/result

# convertor
# load data and splitting data
# into two (or three) set
# setting dataset name
data.input.path=filmtrust
# setting dataset format(UIR, UIRT)
data.column.format=UIR
# setting method of split data
# value can be ratio, loocv, given, KCV
data.model.splitter=ratio
#data.splitter.cv.number=5
# using rating to split dataset
data.splitter.ratio=rating
# filmtrust dataset is saved by text
# text, arff is accepted
data.model.format=text
# the ratio of trainset
# this value should in (0,1)
data.splitter.trainset.ratio=0.8

# Detailed configuration of loocv, given, KCV
# is written in User Guide

# set the random seed for reproducing the results (split data, init parameters and other methods using random)
# default is set 1l
# if do not set ,just use System.currentTimeMillis() as the seed and could not reproduce the results.
rec.random.seed=1

# binarize threshold mainly used in ranking
# -1.0 - maxRate, binarize rate into -1.0 and 1.0
# binThold = -1.0， do nothing
# binThold = value, rating > value is changed to 1.0 other is 0.0, mainly used in ranking
# for PGM 0.0 maybe a better choose
data.convert.binarize.threshold=-1.0

# evaluation the result or not
rec.eval.enable=true

# specifies evaluators
# rec.eval.classes=auc,precision,recall...
# if rec.eval.class is blank
# every evaluator will be calculated
# rec.eval.classes=auc,precision,recall

# evaluator value set is written in User Guide
# if this algorithm is ranking only true or false
#rec.recommender.isranking=false

#can use user,item,social similarity, default value is user, maximum values:user,item,social
#rec.recommender.similarities=user
#rec.recommender.verbose=true


#rec.recommender.class=constantguess

#rec.recommender.class=globalaverage

#rec.neighbors.knn.number=50
#rec.recommender.class=userknn


#rec.recommender.class
#
#rec.recommender.class





# aobpr
#rec.recommender.class=aobpr
#rec.item.distribution.parameter = 500
#rec.iterator.learnrate=0.01
#rec.iterator.learnrate.maximum=0.01
#rec.iterator.maximum=100
#rec.user.regularization=0.01
#rec.item.regularization=0.01
#rec.factor.number=10
#rec.learnrate.bolddriver=false
#rec.learnrate.decay=1.0
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10

#aspectmodelranking
#rec.recommender.class=aspectmodelranking
#rec.iterator.maximum=20
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10
#data.splitter.cv.number=5
#rec.pgm.burnin=10
#rec.pgm.samplelag=10
#rec.topic.number=10

#bhfree
#rec.recommender.class=bhfree
#rec.pgm.burnin=10
#rec.pgm.samplelag=10
#rec.iterator.maximum=100
#rec.recommender.ranking.topn=10


#bpr
#rec.recommender.class=bpr
#rec.iterator.learnrate=0.01
#rec.iterator.learnrate.maximum=0.01
#rec.iterator.maximum=100
#rec.user.regularization=0.01
#rec.item.regularization=0.01
#rec.factor.number=10
#rec.learnRate.bolddriver=false
#rec.learnRate.decay=1.0
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10


#bucm
#rec.recommender.class=bucm
#rec.pgm.burnin=10
#rec.pgm.samplelag=10
#rec.iterator.maximum=100
#rec.pgm.topic.number=10
#rec.bucm.alpha=0.01
#rec.bucm.beta=0.01
#rec.bucm.gamma=0.01
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10


#climf
#rec.recommender.class=climf
#rec.iterator.learnrate=0.001
#rec.iterator.learnrate.maximum=0.01
#rec.iterator.maximum=100
#rec.user.regularization=0.01
#rec.item.regularization=0.01
#rec.factor.number=10
#rec.learnrate.bolddriver=false
#rec.learnrate.decay=1.0
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10

#eals
#rec.recommender.class=eals
#rec.iterator.maximum=10
#rec.user.regularization=0.01
#rec.item.regularization=0.01
#rec.factor.number=10
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10
## 0：eALS MF; 1：WRMF; 2: both
#rec.eals.wrmf.judge=1
## the overall weight of missing data c0
#rec.eals.overall=128
## the significance level of popular items over un-popular ones
#rec.eals.ratio=0.4
## confidence weight coefficient, alpha in original paper
#rec.wrmf.weight.coefficient=4.0




#fismauc
#rec.recommender.class=fismauc
#rec.iterator.learnrate=0.01
#rec.iterator.learnrate.maximum=0.01
#rec.iterator.maximum=10
#rec.user.regularization=0.01
#rec.item.regularization=0.01
#rec.factor.number=10
#rec.learnrate.bolddriver=false
#rec.learnrate.decay=1.0
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10
#rec.fismauc.rho=2
#rec.fismauc.alpha=1.5

#fismrmse
#rec.recommender.class=fismrmse
#rec.iteration.learnrate=0.01
#rec.iterator.maximum=100
#rec.recommender.isranking=true
#rec.fismrmse.rho=1
#rec.fismrmse.alpha=1.5

#gbpr
#rec.recommender.class=gbpr
#rec.iterator.learnrate=0.01
#rec.iterator.learnrate.maximum=0.01
#rec.iterator.maximum=100
#rec.user.regularization=0.01
#rec.item.regularization=0.01
#rec.factor.number=10
#rec.learnrate.bolddriver=false
#rec.learnrate.decay=1.0
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10


#itembigram
#rec.recommender.class=itembigram
#data.column.format=UIRT
##data.input.path=test/ratings-date.txt
#rec.iterator.maximum=100
#rec.topic.number=10
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10
#rec.user.dirichlet.prior=0.01
#rec.topic.dirichlet.prior=0.01
#rec.pgm.burnin=10
#rec.pgm.samplelag=10



#lda
#rec.recommender.class=lda
#rec.iterator.maximum=100
#rec.topic.number = 10
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10
#rec.user.dirichlet.prior=0.01
#rec.topic.dirichlet.prior=0.01
#rec.pgm.burnin=10
#rec.pgm.samplelag=10
#data.splitter.cv.number=5
## (0.0 may be a better choose than -1.0)
#data.convert.binarize.threshold=0.0

#plsa
#rec.recommender.class=plsa
#rec.iteration.learnrate=0.01
#rec.iterator.maximum=100
#rec.recommender.isranking=true
#rec.topic.number = 10
#rec.recommender.ranking.topn=10
## (0.0 may be a better choose than -1.0)
#data.convert.binarize.threshold=0.0


#rankals
#rec.recommender.class=rankals
#rec.iterator.learnrate=0.01
#rec.iterator.learnrate.maximum=0.01
#rec.iterator.maximum=100
#rec.user.regularization=0.01
#rec.item.regularization=0.01
#rec.factor.number=10
#rec.learnrate.bolddriver=false
#rec.learnrate.decay=1.0
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10
#rec.rankals.support.weight=true

#ranksgd
#rec.recommender.class=ranksgd
#rec.iterator.learnrate=0.01
#rec.iterator.learnrate.maximum=0.01
#rec.iterator.maximum=30
#rec.user.regularization=0.01
#rec.item.regularization=0.01
#rec.factor.number=10
#rec.learnrate.bolddriver=false
#rec.learnrate.decay=1.0
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10


#slim
#rec.recommender.class=slim
#rec.similarity.class=cos
## can only use item similarity
#rec.recommender.similarities=item
#rec.iterator.maximum=40
#rec.similarity.shrinkage=10
#rec.recommender.isranking=true
#rec.recommender.ranking.topn=10
#rec.neighbors.knn.number=50
#rec.recommender.earlystop=true
#rec.slim.regularization.l1=1
#rec.slim.regularization.l2=5

#wbpr
rec.recommender.class=wbpr
rec.iterator.learnrate=0.01
rec.iterator.learnrate.maximum=0.01
rec.iterator.maximum=10
rec.user.regularization=0.01
rec.item.regularization=0.01
rec.bias.regularization=0.01
rec.factor.number=10
rec.learnrate.bolddriver=false
rec.learnrate.decay=1.0
rec.recommender.isranking=true
rec.recommender.ranking.topn=10
